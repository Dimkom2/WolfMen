// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini Apps
const tg = window.Telegram.WebApp;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    // –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    BOT_TOKEN: '8414918030:AAG32jw18WxxZ-ALE1SN0rd0BI8m4nzlS5Q',
    
    // –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –≤—Ö–æ–¥–∞
    validAccounts: [
        { login: "247", password: "Utka2022@", name: "–ê–≥–µ–Ω—Ç 247", chatId: "247" },
        { login: "001", password: "Pomidor:2022@", name: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", chatId: "001" },
        { login: "749", password: "Dinozavr456@", name: "–ê–≥–µ–Ω—Ç 749", chatId: "749" }
    ],
    
    // ID —á–∞—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥—É—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ chat_id)
    demoChatIds: {
        '247': '247',
        '001': '001', 
        '749': '749'
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentChat = null;
let messageInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Wolf Messenger...');
    
    tg.expand();
    tg.enableClosingConfirmation();
    tg.setBackgroundColor('#000000');
    tg.setHeaderColor('#000000');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    checkSavedUser();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    initInterface();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkSavedUser() {
    const savedUser = localStorage.getItem('wolf_current_user');
    if (savedUser) {
        try {
            currentUser = JSON.parse(savedUser);
            showPage('app');
            loadUserInterface();
            startMessagePolling();
        } catch (e) {
            localStorage.removeItem('wolf_current_user');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function initInterface() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageInput = document.getElementById('messageInput');
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', handleResize);
    handleResize();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
function handleResize() {
    if (window.innerWidth > 768) {
        // –ü–ö —Ä–µ–∂–∏–º
        document.querySelector('.contacts-panel').style.display = 'flex';
        document.querySelector('.chat-window').style.display = 'flex';
        document.querySelector('.header-back').style.display = 'none';
    } else {
        // –ú–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        document.querySelector('.contacts-panel').style.display = 'flex';
        document.querySelector('.chat-window').style.display = 'none';
        document.querySelector('.header-back').style.display = 'block';
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –≤—Ö–æ–¥
async function checkPassword() {
    const login = document.getElementById('login').value;
    const password = document.getElementById('password').value;
    const errorMessage = document.getElementById('error-message');

    const isValid = CONFIG.validAccounts.find(acc => acc.login === login && acc.password === password);

    if (isValid) {
        errorMessage.textContent = '';
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        currentUser = {
            login: login,
            name: isValid.name,
            chatId: isValid.chatId
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('wolf_current_user', JSON.stringify(currentUser));
        
        showPage('app');
        loadUserInterface();
        startMessagePolling();
        
    } else {
        errorMessage.textContent = '–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserInterface() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    document.getElementById('currentUserAvatar').textContent = currentUser.login;
    document.getElementById('currentUserName').textContent = currentUser.name;
    document.getElementById('currentUserStatus').textContent = 'online';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    loadContacts();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    showWelcomeMessage();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function loadContacts() {
    const contactsList = document.getElementById('contactsList');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    const contacts = CONFIG.validAccounts.filter(acc => acc.login !== currentUser.login);
    
    if (contacts.length === 0) {
        contactsList.innerHTML = '<div class="loading">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</div>';
        return;
    }
    
    contactsList.innerHTML = '';
    
    contacts.forEach(contact => {
        const contactElement = document.createElement('div');
        contactElement.className = 'contact';
        contactElement.dataset.userId = contact.login;
        
        // –°–ª—É—á–∞–π–Ω—ã–π –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–µ–º–æ
        const isOnline = Math.random() > 0.3;
        const statusClass = isOnline ? 'status-online' : 'status-offline';
        const lastSeen = isOnline ? 'online' : '–±—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ';
        
        contactElement.innerHTML = `
            <div class="contact-avatar ${statusClass}">${contact.login}</div>
            <div class="contact-info">
                <div class="contact-name">${contact.name}</div>
                <div class="last-message">${lastSeen}</div>
            </div>
        `;
        
        contactElement.addEventListener('click', () => openChat(contact));
        contactsList.appendChild(contactElement);
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
function openChat(contact) {
    currentChat = contact;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
    document.getElementById('partnerAvatar').textContent = contact.login;
    document.getElementById('partnerName').textContent = contact.name;
    document.getElementById('partnerStatus').textContent = 'online';
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('messageInput').disabled = false;
    document.querySelector('.send-button').disabled = false;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    loadChatHistory(contact.login);
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–∫–Ω–æ —á–∞—Ç–∞
    if (window.innerWidth <= 768) {
        showChatWindow();
    }
    
    // –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    document.querySelectorAll('.contact').forEach(c => c.classList.remove('active'));
    document.querySelector(`[data-user-id="${contact.login}"]`).classList.add('active');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
async function loadChatHistory(contactId) {
    const messagesContainer = document.getElementById('messagesContainer');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram Bot API
        const messages = await getBotMessages();
        const chatMessages = messages.filter(msg => 
            (msg.sender === currentUser.login && msg.receiver === contactId) ||
            (msg.sender === contactId && msg.receiver === currentUser.login)
        );
        
        displayMessages(chatMessages);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
        showDemoMessages();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram Bot API
async function getBotMessages() {
    try {
        const response = await fetch(`https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/getUpdates`);
        const data = await response.json();
        
        if (data.ok) {
            return parseBotMessages(data.result);
        } else {
            throw new Error(data.description);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        return [];
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Bot API
function parseBotMessages(updates) {
    const messages = [];
    
    updates.forEach(update => {
        if (update.message && update.message.text) {
            const msg = update.message;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
            const parts = msg.text.split('|');
            if (parts.length >= 3) {
                messages.push({
                    sender: parts[0],
                    receiver: parts[1],
                    text: parts[2],
                    time: new Date(msg.date * 1000).toLocaleTimeString('ru-RU', {hour: '2-digit', minute:'2-digit'}),
                    type: 'text'
                });
            }
        }
    });
    
    return messages;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
function displayMessages(messages) {
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.innerHTML = '';
    
    if (messages.length === 0) {
        showWelcomeMessage();
        return;
    }
    
    messages.forEach(msg => {
        const messageType = msg.sender === currentUser.login ? 'sent' : 'received';
        addMessageToUI(msg.text, messageType, msg.time);
    });
}

// –ü–æ–∫–∞–∑ –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ Bot API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)
function showDemoMessages() {
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.innerHTML = '';
    
    const demoMessages = [
        { text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', type: 'received', time: '10:30' },
        { text: '–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–º!', type: 'sent', time: '10:31' },
        { text: '–ï—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—é?', type: 'received', time: '10:32' },
        { text: '–î–∞, –≤—Å–µ –ø–æ –ø–ª–∞–Ω—É. –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤–ª—é.', type: 'sent', time: '10:33' }
    ];
    
    demoMessages.forEach(msg => {
        addMessageToUI(msg.text, msg.type, msg.time);
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
async function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const text = messageInput.value.trim();
    
    if (!text || !currentChat) return;
    
    const message = {
        text: text,
        sender: currentUser.login,
        receiver: currentChat.login,
        time: getCurrentTime(),
        type: 'text'
    };
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Bot API
        await sendMessageToBot(message);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        addMessageToUI(text, 'sent', message.time);
        messageInput.value = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        updateLastMessage(currentChat.login, text);
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        simulateResponse();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        addMessageToUI(text, 'sent', message.time);
        messageInput.value = '';
        simulateResponse();
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bot API
async function sendMessageToBot(message) {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const formattedText = `${message.sender}|${message.receiver}|${message.text}`;
    
    const response = await fetch(`https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            chat_id: CONFIG.demoChatIds[message.receiver],
            text: formattedText,
            parse_mode: 'HTML'
        })
    });
    
    const data = await response.json();
    
    if (!data.ok) {
        throw new Error(data.description);
    }
    
    return data;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
function addMessageToUI(text, type, time) {
    const messagesContainer = document.getElementById('messagesContainer');
    
    // –£–±–∏—Ä–∞–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const welcomeMsg = messagesContainer.querySelector('.welcome-message');
    if (welcomeMsg) {
        welcomeMsg.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-text">${text}</div>
            <div class="message-time">${time}</div>
        </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
function simulateResponse() {
    if (!currentChat) return;
    
    setTimeout(() => {
        const responses = [
            '–ü–æ–Ω—è–ª!',
            '–ü—Ä–∏–Ω—è—Ç–æ!', 
            '–†–∞–±–æ—Ç–∞–µ–º!',
            '–Ø—Å–Ω–æ!',
            '–•–æ—Ä–æ—à–æ!',
            '–°–¥–µ–ª–∞–Ω–æ!'
        ];
        const response = responses[Math.floor(Math.random() * responses.length)];
        
        addMessageToUI(response, 'received', getCurrentTime());
        updateLastMessage(currentChat.login, response);
    }, 1000 + Math.random() * 2000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function updateLastMessage(contactId, message) {
    const contactElement = document.querySelector(`[data-user-id="${contactId}"]`);
    if (contactElement) {
        const lastMessageElement = contactElement.querySelector('.last-message');
        if (lastMessageElement) {
            lastMessageElement.textContent = message;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function startMessagePolling() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    messageInterval = setInterval(async () => {
        if (currentChat) {
            await loadChatHistory(currentChat.login);
        }
    }, 5000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getCurrentTime() {
    const now = new Date();
    return now.getHours().toString().padStart(2, '0') + ':' + 
           now.getMinutes().toString().padStart(2, '0');
}

function showWelcomeMessage() {
    const messagesContainer = document.getElementById('messagesContainer');
    messagesContainer.innerHTML = `
        <div class="welcome-message">
            <img src="wolf-logo.png" alt="Wolf" class="welcome-logo">
            <div class="welcome-text">Wolf Messenger –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</div>
            <div class="welcome-subtext">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</div>
        </div>
    `;
}

function showPage(pageId) {
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    document.getElementById(pageId).classList.add('active');
}

function goBack() {
    if (window.innerWidth <= 768) {
        hideChatWindow();
    }
}

function showChatWindow() {
    document.querySelector('.contacts-panel').style.display = 'none';
    document.querySelector('.chat-window').style.display = 'flex';
}

function hideChatWindow() {
    document.querySelector('.contacts-panel').style.display = 'flex';
    document.querySelector('.chat-window').style.display = 'none';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    tg.ready();
    initApp();
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
window.addEventListener('beforeunload', function() {
    if (messageInterval) {
        clearInterval(messageInterval);
    }
});
