// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini Apps
const tg = window.Telegram.WebApp;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    BOT_TOKEN: '8414918030:AAG32jw18WxxZ-ALE1SN0rd0BI8m4nzlS5Q',
    
    validAccounts: [
        { login: "247", password: "Utka2022@", name: "–ê–≥–µ–Ω—Ç 247", chatId: "247" },
        { login: "001", password: "Pomidor:2022@", name: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", chatId: "001" },
        { login: "749", password: "Dinozavr456@", name: "–ê–≥–µ–Ω—Ç 749", chatId: "749" }
    ]
};

let currentUser = null;
let currentChat = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Wolf Messenger –¥–ª—è TMA...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π)
    try {
        tg.expand();
        console.log('TMA: expand —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
        console.log('TMA: expand –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }
    
    try {
        tg.enableClosingConfirmation();
        console.log('TMA: enableClosingConfirmation —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
        console.log('TMA: enableClosingConfirmation –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }
    
    try {
        tg.setBackgroundColor('#000000');
        console.log('TMA: setBackgroundColor —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
        console.log('TMA: setBackgroundColor –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }
    
    tg.ready();
    console.log('TMA: ready –≤—ã–∑–≤–∞–Ω');
    
    initInterface();
    checkAuthOnLoad();
}

function initInterface() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
    
    const messageInput = document.getElementById('messageInput');
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ –ø–æ Enter
    const passwordInput = document.getElementById('password');
    if (passwordInput) {
        passwordInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                console.log('–ù–∞–∂–∞—Ç–∞ Enter –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è');
                checkPassword();
            }
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
    const loginButton = document.querySelector('.login-button');
    if (loginButton) {
        loginButton.addEventListener('click', function() {
            console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –í–æ–π—Ç–∏');
            checkPassword();
        });
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ü–ö —Ä–µ–∂–∏–º –¥–ª—è TMA
    setTimeout(forceDesktopMode, 100);
}

// –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú –ü–ö –î–õ–Ø TMA
function forceDesktopMode() {
    console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ PC —Ä–µ–∂–∏–º–∞...');
    const contactsPanel = document.querySelector('.contacts-panel');
    const chatWindow = document.querySelector('.chat-window');
    
    if (contactsPanel) {
        contactsPanel.style.display = 'flex';
        contactsPanel.style.width = '35%';
        console.log('–ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }
    
    if (chatWindow) {
        chatWindow.style.display = 'flex';
        chatWindow.style.width = '65%';
        console.log('–û–∫–Ω–æ —á–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }
    
    const headerBack = document.querySelector('.header-back');
    if (headerBack) headerBack.style.display = 'none';
}

// –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø
function checkPassword() {
    console.log('=== –§–£–ù–ö–¶–ò–Ø checkPassword –í–´–ó–í–ê–ù–ê ===');
    
    const login = document.getElementById('login').value;
    const password = document.getElementById('password').value;
    const errorMessage = document.getElementById('error-message');

    console.log('–í–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω:', login);
    console.log('–í–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å:', password);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
    if (!login || !password) {
        console.log('–û—à–∏–±–∫–∞: –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç—ã–µ');
        errorMessage.textContent = '–û–®–ò–ë–ö–ê: –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å';
        return;
    }

    const isValid = CONFIG.validAccounts.find(acc => acc.login === login && acc.password === password);
    console.log('–ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç:', isValid);

    if (isValid) {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        errorMessage.textContent = '';
        
        currentUser = {
            login: login,
            name: isValid.name,
            chatId: isValid.chatId
        };
        
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage:', currentUser);
        localStorage.setItem('wolf_current_user', JSON.stringify(currentUser));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        const saved = localStorage.getItem('wolf_current_user');
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saved);
        
        showPage('app');
        loadUserInterface();
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        errorMessage.textContent = '–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        document.getElementById('password').value = '';
    }
}

// –ó–ê–ì–†–£–ó–ö–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function loadUserInterface() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    if (!currentUser) {
        console.log('–û—à–∏–±–∫–∞: currentUser –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        showPage('login-page');
        return;
    }
    
    console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
    
    const currentUserAvatar = document.getElementById('currentUserAvatar');
    const currentUserName = document.getElementById('currentUserName');
    const currentUserStatus = document.getElementById('currentUserStatus');
    
    if (currentUserAvatar) {
        currentUserAvatar.textContent = currentUser.login;
        console.log('–ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', currentUser.login);
    }
    if (currentUserName) {
        currentUserName.textContent = currentUser.name;
        console.log('–ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', currentUser.name);
    }
    if (currentUserStatus) {
        currentUserStatus.textContent = 'online';
        console.log('–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: online');
    }
    
    loadContacts();
}

// –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–¢–ê–ö–¢–û–í
function loadContacts() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...');
    const contactsList = document.getElementById('contactsList');
    
    if (!currentUser || !contactsList) {
        console.log('–û—à–∏–±–∫–∞: –Ω–µ—Ç currentUser –∏–ª–∏ contactsList');
        return;
    }
    
    const contacts = CONFIG.validAccounts.filter(acc => acc.login !== currentUser.login);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:', contacts);
    
    if (contacts.length === 0) {
        contactsList.innerHTML = '<div class="loading">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</div>';
        return;
    }
    
    contactsList.innerHTML = '';
    
    contacts.forEach(contact => {
        const contactElement = document.createElement('div');
        contactElement.className = 'contact';
        contactElement.dataset.userId = contact.login;
        
        const chatHistory = loadChatHistoryFromStorage(currentUser.login, contact.login);
        const lastMessage = chatHistory.length > 0 ? chatHistory[chatHistory.length - 1].text : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
        
        contactElement.innerHTML = `
            <div class="contact-avatar status-online">${contact.login}</div>
            <div class="contact-info">
                <div class="contact-name">${contact.name}</div>
                <div class="last-message">${lastMessage}</div>
            </div>
        `;
        
        contactElement.addEventListener('click', () => {
            console.log('–ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É:', contact.name);
            openChat(contact);
        });
        contactsList.appendChild(contactElement);
    });
    
    console.log('–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
}

// –û–¢–ö–†–´–¢–ò–ï –ß–ê–¢–ê
function openChat(contact) {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å:', contact.name);
    
    if (!currentUser) {
        console.log('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        showPage('login-page');
        return;
    }
    
    currentChat = contact;
    console.log('–¢–µ–∫—É—â–∏–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', currentChat);
    
    const partnerAvatar = document.getElementById('partnerAvatar');
    const partnerName = document.getElementById('partnerName');
    const partnerStatus = document.getElementById('partnerStatus');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.querySelector('.send-button');
    
    if (partnerAvatar) partnerAvatar.textContent = contact.login;
    if (partnerName) partnerName.textContent = contact.name;
    if (partnerStatus) partnerStatus.textContent = 'online';
    if (messageInput) messageInput.disabled = false;
    if (sendButton) sendButton.disabled = false;
    
    console.log('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    
    loadChatHistory(contact.login);
    
    document.querySelectorAll('.contact').forEach(c => c.classList.remove('active'));
    const activeContact = document.querySelector(`[data-user-id="${contact.login}"]`);
    if (activeContact) activeContact.classList.add('active');
}

// –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –ß–ê–¢–ê
function loadChatHistory(contactId) {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å:', contactId);
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;
    
    const chatHistory = loadChatHistoryFromStorage(currentUser.login, contactId);
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', chatHistory.length);
    displayMessages(chatHistory);
}

// –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –ò–ó LOCALSTORAGE
function loadChatHistoryFromStorage(user1, user2) {
    const chatKey = `wolf_chat_${[user1, user2].sort().join('_')}`;
    try {
        const history = localStorage.getItem(chatKey);
        return history ? JSON.parse(history) : [];
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', e);
        return [];
    }
}

// –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –í LOCALSTORAGE
function saveChatHistoryToStorage(user1, user2, messages) {
    const chatKey = `wolf_chat_${[user1, user2].sort().join('_')}`;
    try {
        localStorage.setItem(chatKey, JSON.stringify(messages));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', e);
    }
}

// –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
function displayMessages(messages) {
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;
    
    messagesContainer.innerHTML = '';
    
    if (messages.length === 0) {
        showWelcomeMessage();
        return;
    }
    
    messages.forEach(msg => {
        addMessageToUI(msg.text, msg.sender === currentUser.login ? 'sent' : 'received', msg.time, false);
    });
    
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø
function sendMessage() {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    if (!currentUser || !currentChat) {
        console.log('–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞');
        showPage('login-page');
        return;
    }
    
    const messageInput = document.getElementById('messageInput');
    if (!messageInput) return;
    
    const text = messageInput.value.trim();
    if (!text) return;

    console.log('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', text);

    const message = {
        text: text,
        sender: currentUser.login,
        receiver: currentChat.login,
        time: getCurrentTime(),
        type: 'sent'
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    saveMessageToHistory(currentUser.login, currentChat.login, message);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    addMessageToUI(text, 'sent', message.time, true);
    messageInput.value = '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    updateLastMessage(currentChat.login, text);
    
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
}

// –°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –ò–°–¢–û–†–ò–Æ
function saveMessageToHistory(user1, user2, message) {
    const history = loadChatHistoryFromStorage(user1, user2);
    history.push(message);
    saveChatHistoryToStorage(user1, user2, history);
}

// –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –ò–ù–¢–ï–†–§–ï–ô–°
function addMessageToUI(text, type, time, shouldScroll = true) {
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;
    
    const welcomeMsg = messagesContainer.querySelector('.welcome-message');
    if (welcomeMsg) {
        welcomeMsg.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-text">${text}</div>
            <div class="message-time">${time}</div>
        </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    
    if (shouldScroll) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
}

// –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ï–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
function updateLastMessage(contactId, message) {
    const contactElement = document.querySelector(`[data-user-id="${contactId}"]`);
    if (contactElement) {
        const lastMessageElement = contactElement.querySelector('.last-message');
        if (lastMessageElement) {
            lastMessageElement.textContent = message;
        }
    }
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
function getCurrentTime() {
    const now = new Date();
    return now.getHours().toString().padStart(2, '0') + ':' + 
           now.getMinutes().toString().padStart(2, '0');
}

function showWelcomeMessage() {
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;
    
    const chatName = currentChat ? currentChat.name : '–∫–æ–Ω—Ç–∞–∫—Ç–æ–º';
    messagesContainer.innerHTML = `
        <div class="welcome-message">
            <img src="wolf-logo.png" alt="Wolf" class="welcome-logo">
            <div class="welcome-text">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å ${chatName}</div>
            <div class="welcome-subtext">–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ</div>
        </div>
    `;
}

function showPage(pageId) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', pageId);
    
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    
    const pageElement = document.getElementById(pageId);
    if (pageElement) {
        pageElement.classList.add('active');
        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:', pageId);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è TMA
    setTimeout(forceDesktopMode, 50);
}

function goBack() {
    // –í TMA –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –ø–∞–Ω–µ–ª–∏
    forceDesktopMode();
}

function showChatWindow() {
    // –í TMA –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –ø–∞–Ω–µ–ª–∏
    forceDesktopMode();
}

function hideChatWindow() {
    // –í TMA –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –ø–∞–Ω–µ–ª–∏
    forceDesktopMode();
}

// –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
function checkAuthOnLoad() {
    try {
        const savedUser = localStorage.getItem('wolf_current_user');
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ TMA:', savedUser);
        
        if (savedUser) {
            currentUser = JSON.parse(savedUser);
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', currentUser);
            showPage('app');
            loadUserInterface();
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ TMA:', currentUser.name);
        } else {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ TMA');
            showPage('login-page');
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ TMA:', e);
        localStorage.removeItem('wolf_current_user');
        showPage('login-page');
    }
}

// –§–£–ù–ö–¶–ò–Ø –í–´–•–û–î–ê –î–õ–Ø TMA
function logout() {
    console.log('–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
    currentUser = null;
    currentChat = null;
    localStorage.removeItem('wolf_current_user');
    showPage('login-page');
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    document.getElementById('login').value = '';
    document.getElementById('password').value = '';
    console.log('–í—ã—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –î–õ–Ø TMA
document.addEventListener('DOMContentLoaded', function() {
    console.log('=== DOM –ó–ê–ì–†–£–ñ–ï–ù –î–õ–Ø TMA ===');
    initApp();
});
